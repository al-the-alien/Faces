;; Analyzed by ClojureScript 0.0-2816
{:defs {nose {:protocol-inline nil, :name shapes.core/nose, :variadic false, :file "src/shapes/core.cljs", :end-column 11, :method-params ([p__172165 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 235, :end-line 235, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [head-height head-width head-cx head-cy head-rx head-ry eye-cxa eye-cxb eye-cy eye-rx eye-ry pupil-cy pupil-r mouth-y horizontal-a horizontal-b vertical-a vertical-b], :as measures} dev?])), :test true}, y-on-ellipse {:protocol-inline nil, :name shapes.core/y-on-ellipse, :variadic false, :file "src/shapes/core.cljs", :end-column 19, :method-params ([x cx a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 4}), :line 36, :end-line 36, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x cx a b])), :test true}, ys-within-ellipse {:protocol-inline nil, :name shapes.core/ys-within-ellipse, :variadic false, :file "src/shapes/core.cljs", :end-column 24, :method-params ([x cx a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 4}), :line 42, :end-line 42, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x cx a b])), :test true}, eyes {:protocol-inline nil, :name shapes.core/eyes, :variadic false, :file "src/shapes/core.cljs", :end-column 11, :method-params ([p__172159 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 126, :end-line 126, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [head-cx head-cy head-width head-height head-rx head-ry], :as measures} dev?])), :test true}, sqrt {:protocol-inline nil, :name shapes.core/sqrt, :variadic false, :file "src/shapes/core.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, draw-mouth {:protocol-inline nil, :name shapes.core/draw-mouth, :variadic false, :file "src/shapes/core.cljs", :end-column 20, :method-params ([p__172174]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 407, :end-line 407, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [head-cx head-cy head-ry head-rx mouth-cx mouth-cy mouth-rx mouth-ry mouth-clip-x mouth-clip-y mouth-clip-width mouth-clip-height horizontal-c test-height below-c], :as measures}])), :test true}, x-on-ellipse {:protocol-inline nil, :name shapes.core/x-on-ellipse, :variadic false, :file "src/shapes/core.cljs", :end-column 19, :method-params ([y cy a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 4}), :line 30, :end-line 30, :max-fixed-arity 4, :fn-var true, :arglists (quote ([y cy a b])), :test true}, mouth {:protocol-inline nil, :name shapes.core/mouth, :variadic false, :file "src/shapes/core.cljs", :end-column 12, :method-params ([p__172171 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 343, :end-line 343, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [head-height head-width head-cx head-cy head-rx head-ry eye-cxa eye-cxb eye-cy eye-ry nose-cy horizontal-c a-to-b vertical-a], :as measures} dev?])), :test true}, rand-float {:protocol-inline nil, :name shapes.core/rand-float, :variadic false, :file "src/shapes/core.cljs", :end-column 17, :method-params ([min-x max-x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([min-x max-x])), :test true}, draw-eyes {:protocol-inline nil, :name shapes.core/draw-eyes, :variadic false, :file "src/shapes/core.cljs", :end-column 19, :method-params ([p__172162]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 186, :end-line 186, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [eye-cxa eye-cxb eye-cy eye-rx eye-ry pupil-r pupil-cxa pupil-cxb pupil-cy highlight-cxa highlight-cxb highlight-cy highlight-r]}])), :test true}, head {:protocol-inline nil, :name shapes.core/head, :variadic false, :file "src/shapes/core.cljs", :end-column 11, :method-params ([p__172177 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 428, :end-line 428, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [cx cy width height]} dev?])), :test true}, draw-nose {:protocol-inline nil, :name shapes.core/draw-nose, :variadic false, :file "src/shapes/core.cljs", :end-column 19, :method-params ([p__172168]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 308, :end-line 308, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [nose-cx nose-cy nose-rx nose-ry nose-clip-xa nose-clip-xb nose-clip-yab nose-clip-xc nose-clip-yc nose-clip-width nose-clip-height nose-shadow-clip-y]}])), :test true}, abs {:protocol-inline nil, :name shapes.core/abs, :variadic false, :file "src/shapes/core.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, face {:protocol-inline nil, :name shapes.core/face, :variadic true, :file "src/shapes/core.cljs", :end-column 11, :method-params ([dev? p__172180]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic true, :max-fixed-arity 1}), :line 463, :end-line 463, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dev? & {:keys [proportional?]}])), :test true}, basic-measurements {:protocol-inline nil, :name shapes.core/basic-measurements, :variadic false, :file "src/shapes/core.cljs", :end-column 25, :method-params ([dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 438, :end-line 438, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dev?])), :test true}, square {:protocol-inline nil, :name shapes.core/square, :variadic false, :file "src/shapes/core.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, xy-on-pupil {:protocol-inline nil, :name shapes.core/xy-on-pupil, :variadic false, :file "src/shapes/core.cljs", :end-column 18, :method-params ([pupil-r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pupil-r])), :doc "Takes the radius of a circle with origin (0, 0).\n  Returns a number w, where (w, w) is on the circumference of the circle.", :test true}, pupils {:protocol-inline nil, :name shapes.core/pupils, :variadic false, :file "src/shapes/core.cljs", :end-column 13, :method-params ([p__172156 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [eye-cxa eye-cxb eye-cy eye-rx eye-ry eye-cy], :as measures} dev?])), :test true}, avg {:protocol-inline nil, :name shapes.core/avg, :variadic true, :file "src/shapes/core.cljs", :end-column 10, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic true, :max-fixed-arity 0}), :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& xs])), :test true}, draw-face {:protocol-inline nil, :name shapes.core/draw-face, :variadic false, :file "src/shapes/core.cljs", :end-column 19, :method-params ([p__172185]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 477, :end-line 477, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [head-cx head-cy head-rx head-ry head-width head-height], :as measures}])), :test true}}, :name shapes.core, :doc nil, :excludes #{}, :use-macros {html sablono.core, defcomponent om-tools.core, defhtml sablono.core}, :require-macros {om-tools.core om-tools.core, html sablono.core, sablono.core sablono.core, om.core om.core, om om.core}, :uses nil, :requires {p shapes.proportional, shapes.proportional shapes.proportional, om-tools.core om-tools.core, html sablono.core, sablono.core sablono.core, om.core om.core, om om.core}, :imports nil}