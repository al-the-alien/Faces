;; Analyzed by ClojureScript 0.0-3308
{:use-macros {html sablono.core, defcomponent om-tools.core, defhtml sablono.core}, :excludes #{}, :name shapes.core, :imports nil, :requires {om om.core, om.core om.core, html sablono.core, sablono.core sablono.core, om-tools.core om-tools.core, p shapes.proportional, shapes.proportional shapes.proportional}, :uses nil, :defs {nose {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 239, :column 7, :end-line 239, :end-column 11, :arglists (quote ([{:keys [head-cx head-cy head-ry horizontal-b vertical-a vertical-b], :as measures} avg?]))}, :name shapes.core/nose, :variadic false, :file "src/shapes/core.cljs", :end-column 11, :method-params ([p__23296 avg?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [head-cx head-cy head-ry horizontal-b vertical-a vertical-b], :as measures} avg?]))}, y-on-ellipse {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 37, :column 7, :end-line 37, :end-column 19, :arglists (quote ([x cx a b]))}, :name shapes.core/y-on-ellipse, :variadic false, :file "src/shapes/core.cljs", :end-column 19, :method-params ([x cx a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x cx a b]))}, ys-within-ellipse {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 43, :column 7, :end-line 43, :end-column 24, :arglists (quote ([x cx a b]))}, :name shapes.core/ys-within-ellipse, :variadic false, :file "src/shapes/core.cljs", :end-column 24, :method-params ([x cx a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 4, :fn-var true, :arglists (quote ([x cx a b]))}, eyes {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 128, :column 7, :end-line 128, :end-column 11, :arglists (quote ([{:keys [head-cx head-cy head-width head-height head-rx head-ry], :as measures} avg?]))}, :name shapes.core/eyes, :variadic false, :file "src/shapes/core.cljs", :end-column 11, :method-params ([p__23290 avg?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [head-cx head-cy head-width head-height head-rx head-ry], :as measures} avg?]))}, sqrt {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 12, :column 7, :end-line 12, :end-column 11, :arglists (quote ([x]))}, :name shapes.core/sqrt, :variadic false, :file "src/shapes/core.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, draw-mouth {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 410, :column 10, :end-line 410, :end-column 20, :arglists (quote ([{:keys [mouth-cx mouth-cy mouth-rx mouth-ry mouth-clip-x mouth-clip-y mouth-clip-width mouth-clip-height], :as measures}]))}, :name shapes.core/draw-mouth, :variadic false, :file "src/shapes/core.cljs", :end-column 20, :method-params ([p__23305]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 410, :end-line 410, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [mouth-cx mouth-cy mouth-rx mouth-ry mouth-clip-x mouth-clip-y mouth-clip-width mouth-clip-height], :as measures}]))}, x-on-ellipse {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 31, :column 7, :end-line 31, :end-column 19, :arglists (quote ([y cy a b]))}, :name shapes.core/x-on-ellipse, :variadic false, :file "src/shapes/core.cljs", :end-column 19, :method-params ([y cy a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 4, :fn-var true, :arglists (quote ([y cy a b]))}, mouth {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 350, :column 7, :end-line 350, :end-column 12, :arglists (quote ([{:keys [head-cx head-cy head-rx head-ry horizontal-c a-to-b], :as measures} avg?]))}, :name shapes.core/mouth, :variadic false, :file "src/shapes/core.cljs", :end-column 12, :method-params ([p__23302 avg?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 350, :end-line 350, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [head-cx head-cy head-rx head-ry horizontal-c a-to-b], :as measures} avg?]))}, rand-float {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 25, :column 7, :end-line 25, :end-column 17, :arglists (quote ([min-x max-x] [min-x max-x step])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([min-x max-x] [min-x max-x step]), :arglists ([min-x max-x] [min-x max-x step]), :arglists-meta (nil nil)}}, :name shapes.core/rand-float, :variadic false, :file "src/shapes/core.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([min-x max-x] [min-x max-x step]), :arglists ([min-x max-x] [min-x max-x step]), :arglists-meta (nil nil)}, :method-params ([min-x max-x] [min-x max-x step]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 3, :fn-var true, :arglists ([min-x max-x] [min-x max-x step])}, draw-eyes {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 188, :column 10, :end-line 188, :end-column 19, :arglists (quote ([{:keys [eye-cxa eye-cxb eye-cy eye-rx eye-ry pupil-cxa pupil-cxb pupil-cy pupil-r highlight-cxa highlight-cxb highlight-cy highlight-r]}]))}, :name shapes.core/draw-eyes, :variadic false, :file "src/shapes/core.cljs", :end-column 19, :method-params ([p__23293]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [eye-cxa eye-cxb eye-cy eye-rx eye-ry pupil-cxa pupil-cxb pupil-cy pupil-r highlight-cxa highlight-cxb highlight-cy highlight-r]}]))}, head {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 426, :column 7, :end-line 426, :end-column 11, :arglists (quote ([{:keys [cx cy width height]} avg?]))}, :name shapes.core/head, :variadic false, :file "src/shapes/core.cljs", :end-column 11, :method-params ([p__23308 avg?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 426, :end-line 426, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [cx cy width height]} avg?]))}, draw-nose {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 310, :column 10, :end-line 310, :end-column 19, :arglists (quote ([{:keys [nose-cx nose-cy nose-rx nose-ry nose-clip-xa nose-clip-xb nose-clip-yab nose-clip-xc nose-clip-yc nose-clip-width nose-clip-height nose-shadow-clip-y]}]))}, :name shapes.core/draw-nose, :variadic false, :file "src/shapes/core.cljs", :end-column 19, :method-params ([p__23299]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 310, :end-line 310, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [nose-cx nose-cy nose-rx nose-ry nose-clip-xa nose-clip-xb nose-clip-yab nose-clip-xc nose-clip-yc nose-clip-width nose-clip-height nose-shadow-clip-y]}]))}, abs {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 16, :column 7, :end-line 16, :end-column 10, :arglists (quote ([x]))}, :name shapes.core/abs, :variadic false, :file "src/shapes/core.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, face {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 454, :column 7, :end-line 454, :end-column 11, :arglists (quote ([avg? & {:keys [proportional?]}])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(avg? {:keys [proportional?]})], :arglists ([avg? & {:keys [proportional?]}]), :arglists-meta (nil)}}, :name shapes.core/face, :variadic true, :file "src/shapes/core.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(avg? {:keys [proportional?]})], :arglists ([avg? & {:keys [proportional?]}]), :arglists-meta (nil)}, :method-params [(avg? {:keys [proportional?]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 454, :end-line 454, :max-fixed-arity 1, :fn-var true, :arglists ([avg? & {:keys [proportional?]}])}, basic-measurements {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 436, :column 7, :end-line 436, :end-column 25, :arglists (quote ([avg?]))}, :name shapes.core/basic-measurements, :variadic false, :file "src/shapes/core.cljs", :end-column 25, :method-params ([avg?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 436, :max-fixed-arity 1, :fn-var true, :arglists (quote ([avg?]))}, square {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 8, :column 7, :end-line 8, :end-column 13, :arglists (quote ([x]))}, :name shapes.core/square, :variadic false, :file "src/shapes/core.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, xy-on-pupil {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 50, :column 7, :end-line 50, :end-column 18, :arglists (quote ([pupil-r])), :doc "Takes the radius of a circle with origin (0, 0).\n  Returns a number w, where (w, w) is on the circumference of the circle."}, :name shapes.core/xy-on-pupil, :variadic false, :file "src/shapes/core.cljs", :end-column 18, :method-params ([pupil-r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pupil-r])), :doc "Takes the radius of a circle with origin (0, 0).\n  Returns a number w, where (w, w) is on the circumference of the circle."}, pupils {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 58, :column 7, :end-line 58, :end-column 13, :arglists (quote ([{:keys [eye-cxa eye-cxb eye-cy eye-rx eye-ry], :as measures} avg?]))}, :name shapes.core/pupils, :variadic false, :file "src/shapes/core.cljs", :end-column 13, :method-params ([p__23287 avg?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [eye-cxa eye-cxb eye-cy eye-rx eye-ry], :as measures} avg?]))}, avg {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 20, :column 7, :end-line 20, :end-column 10, :arglists (quote ([& xs])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}}, :name shapes.core/avg, :variadic true, :file "src/shapes/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(xs)], :arglists ([& xs]), :arglists-meta (nil)}, :method-params [(xs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists ([& xs])}, draw-face {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/core.cljs", :line 468, :column 10, :end-line 468, :end-column 19, :arglists (quote ([{:keys [head-cx head-cy head-rx head-ry], :as measures}]))}, :name shapes.core/draw-face, :variadic false, :file "src/shapes/core.cljs", :end-column 19, :method-params ([p__23315]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 468, :end-line 468, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [head-cx head-cy head-rx head-ry], :as measures}]))}}, :require-macros {om om.core, om.core om.core, html sablono.core, sablono.core sablono.core, om-tools.core om-tools.core}, :cljs.analyzer/constants {:seen #{:nose-cx :nose-rx :min :nose-cy :highlight-cxb :nose-shadow-clip-y :rx :proportional? :nose-clip-width :eye-cxb :head-ry :eye-cy :nose-ry :else :mouth-cy :pupil-r :head-cx :vertical-a :pupil-cy :horizontal-c :horizontal-a :highlight-cxa :width :highlight-r :below-c :mouth-clip-x :a-to-b :head-cy :mouth-clip-height :head-height :eye-cxa :eye-rx :pupil-cxb :nose-clip-yab :mouth-clip-y :max :cx :nose-clip-height :cy :nose-clip-xc :pupil-cxa :highlight-cy :mouth-ry :nose-clip-xb :mouth-clip-width :head-width :horizontal-b :nose-clip-yc :mouth-rx :vertical-b :ry :avg? :head-rx :height :eye-ry :nose-clip-xa :mouth-cx}, :order [:min :max :eye-cxa :eye-cxb :eye-cy :eye-rx :eye-ry :cx :cy :rx :ry :else :pupil-r :pupil-cxa :pupil-cxb :pupil-cy :highlight-r :highlight-cxa :highlight-cxb :highlight-cy :head-cx :head-cy :head-width :head-height :head-rx :head-ry :vertical-a :horizontal-a :horizontal-b :vertical-b :avg? :nose-cx :nose-rx :nose-cy :nose-shadow-clip-y :nose-clip-width :nose-ry :horizontal-c :a-to-b :nose-clip-yab :nose-clip-height :nose-clip-xc :nose-clip-xb :nose-clip-yc :nose-clip-xa :mouth-cy :below-c :mouth-clip-x :mouth-clip-height :mouth-clip-y :mouth-ry :mouth-clip-width :mouth-rx :mouth-cx :width :height :proportional?]}, :doc nil}