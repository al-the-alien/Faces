;; Analyzed by ClojureScript 0.0-2816
{:defs {->app {:protocol-inline nil, :name shapes.main/->app, :variadic false, :file "src/shapes/main.cljs", :method-params ([cursor__10251__auto__] [cursor__10251__auto__ m10978]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cursor__10251__auto__] [cursor__10251__auto__ m10978])), :test true}, ->t10990 {:protocol-inline nil, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.main/->t10990, :variadic false, :file "src/shapes/main.cljs", :method-params ([G__10984 owner data output-schema10979 G__10983 output-checker10982 validate__7745__auto__ app ufv__ input-schema10980 input-checker10981 meta10991]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :methods ({:tag shapes.main/t10990, :variadic false, :max-fixed-arity 12}), :line 41, :max-fixed-arity 12, :fn-var true, :arglists (quote ([G__10984 owner data output-schema10979 G__10983 output-checker10982 validate__7745__auto__ app ufv__ input-schema10980 input-checker10981 meta10991])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t10990 {:num-fields 12, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.main/t10990, :file "src/shapes/main.cljs", :type true, :anonymous true, :column 1, :line 41, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t10985 {:protocol-inline nil, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.main/->t10985, :variadic false, :file "src/shapes/main.cljs", :method-params ([G__10984 owner data output-schema10979 G__10983 output-checker10982 validate__7745__auto__ app ufv__ input-schema10980 input-checker10981 meta10986]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :methods ({:tag shapes.main/t10985, :variadic false, :max-fixed-arity 12}), :line 41, :max-fixed-arity 12, :fn-var true, :arglists (quote ([G__10984 owner data output-schema10979 G__10983 output-checker10982 validate__7745__auto__ app ufv__ input-schema10980 input-checker10981 meta10986])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t10985 {:num-fields 12, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.main/t10985, :file "src/shapes/main.cljs", :type true, :anonymous true, :column 1, :line 41, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, app {:schema (schema.core/make-fn-schema output-schema10979 [input-schema10980]), :protocol-inline nil, :name shapes.main/app, :variadic false, :file "src/shapes/main.cljs", :end-column 18, :method-params ([G__10983 G__10984]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag shapes.main/t10990, :variadic false, :max-fixed-arity 2}), :raw-arglists (quote ([data owner])), :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data owner])), :doc "Inputs: [data owner]", :test true}, interface {:protocol-inline nil, :name shapes.main/interface, :variadic false, :file "src/shapes/main.cljs", :end-column 16, :method-params ([data new-face]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 2}), :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data new-face])), :test true}, app-state {:file "src/shapes/main.cljs", :line 8, :column 1, :end-line 8, :end-column 19, :test true, :name shapes.main/app-state}}, :name shapes.main, :doc nil, :excludes #{}, :use-macros {sel1 dommy.core, html sablono.core, defcomponent om-tools.core}, :require-macros {dommy.core dommy.core, om-tools.core om-tools.core, html sablono.core, sablono.core sablono.core, om.core om.core, om om.core}, :uses nil, :requires {core shapes.core, shapes.core shapes.core, dommy.core dommy.core, om-tools.core om-tools.core, html sablono.core, sablono.core sablono.core, om.core om.core, om om.core}, :imports nil}