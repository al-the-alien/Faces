;; Analyzed by ClojureScript 0.0-3308
{:use-macros {sel1 dommy.core, html sablono.core, defcomponent om-tools.core}, :excludes #{}, :name shapes.main, :imports nil, :requires {om om.core, om.core om.core, html sablono.core, sablono.core sablono.core, om-tools.core om-tools.core, dommy.core dommy.core, core shapes.core, shapes.core shapes.core}, :uses nil, :defs {app-state {:name shapes.main/app-state, :file "src/shapes/main.cljs", :line 8, :column 1, :end-line 8, :end-column 19, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/main.cljs", :line 8, :column 10, :end-line 8, :end-column 19}}, interface {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/src/shapes/main.cljs", :line 12, :column 7, :end-line 12, :end-column 16, :arglists (quote ([data new-face]))}, :name shapes.main/interface, :variadic false, :file "src/shapes/main.cljs", :end-column 16, :method-params ([data new-face]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data new-face]))}, app {:schema (schema.core/make-fn-schema output-schema23321 [input-schema23322]), :protocol-inline nil, :meta {:arglists (quote ([data owner])), :file "/Users/eliana/workspace/cljs/Portraits/src/shapes/main.cljs", :line 41, :column 15, :end-line 41, :end-column 18, :schema (schema.core/make-fn-schema output-schema23321 [input-schema23322]), :doc "Inputs: [data owner]", :raw-arglists (quote ([data owner]))}, :name shapes.main/app, :variadic false, :file "src/shapes/main.cljs", :end-column 18, :method-params ([G__23325 G__23326]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([data owner])), :line 41, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data owner])), :doc "Inputs: [data owner]"}, t23327 {:num-fields 12, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.main/t23327, :file "src/shapes/main.cljs", :type true, :anonymous true, :column 1, :line 41, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t23327 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([owner data input-checker23323 input-schema23322 G__23325 output-checker23324 G__23326 output-schema23321 validate__18554__auto__ app ufv__ meta23328])), :file nil}, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.main/->t23327, :variadic false, :file "src/shapes/main.cljs", :method-params ([owner data input-checker23323 input-schema23322 G__23325 output-checker23324 G__23326 output-schema23321 validate__18554__auto__ app ufv__ meta23328]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :line 41, :max-fixed-arity 12, :fn-var true, :arglists (quote ([owner data input-checker23323 input-schema23322 G__23325 output-checker23324 G__23326 output-schema23321 validate__18554__auto__ app ufv__ meta23328])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t23332 {:num-fields 12, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.main/t23332, :file "src/shapes/main.cljs", :type true, :anonymous true, :column 1, :line 41, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t23332 {:protocol-inline nil, :meta {:anonymous true, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([owner data input-checker23323 input-schema23322 G__23325 output-checker23324 G__23326 output-schema23321 validate__18554__auto__ app ufv__ meta23333])), :file nil}, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.main/->t23332, :variadic false, :file "src/shapes/main.cljs", :method-params ([owner data input-checker23323 input-schema23322 G__23325 output-checker23324 G__23326 output-schema23321 validate__18554__auto__ app ufv__ meta23333]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :line 41, :max-fixed-arity 12, :fn-var true, :arglists (quote ([owner data input-checker23323 input-schema23322 G__23325 output-checker23324 G__23326 output-schema23321 validate__18554__auto__ app ufv__ meta23333])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->app {:protocol-inline nil, :meta {:arglists (quote ([cursor__23210__auto__] [cursor__23210__auto__ m23320])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([cursor__23210__auto__] [cursor__23210__auto__ m23320]), :arglists ([cursor__23210__auto__] [cursor__23210__auto__ m23320]), :arglists-meta (nil nil)}, :file nil}, :name shapes.main/->app, :variadic false, :file "src/shapes/main.cljs", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([cursor__23210__auto__] [cursor__23210__auto__ m23320]), :arglists ([cursor__23210__auto__] [cursor__23210__auto__ m23320]), :arglists-meta (nil nil)}, :method-params ([cursor__23210__auto__] [cursor__23210__auto__ m23320]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :max-fixed-arity 2, :fn-var true, :arglists ([cursor__23210__auto__] [cursor__23210__auto__ m23320])}}, :require-macros {om om.core, om.core om.core, html sablono.core, sablono.core sablono.core, om-tools.core om-tools.core, dommy.core dommy.core}, :cljs.analyzer/constants {:seen #{:y :text-anchor :schema :rx :stroke :schema.core/error :font-size :measurements :fill :value :width :cursor :type :on-click :style :g :text#header :stroke-width :error :x :target :rect :ry :g#click-me :avg? :proportional :height :text}, :order [:measurements :proportional :g :text#header :x :y :text-anchor :stroke :fill :font-size :g#click-me :on-click :style :avg? :cursor :rect :rx :width :stroke-width :ry :height :text :type :schema :value :error :schema.core/error :target]}, :doc nil}