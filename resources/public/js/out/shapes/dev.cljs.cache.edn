;; Analyzed by ClojureScript 0.0-2816
{:defs {nose {:protocol-inline nil, :name shapes.dev/nose, :variadic false, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([p__108844 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 220, :end-line 220, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [head-height head-width head-cx head-cy head-rx head-ry eye-cxa eye-cxb eye-cy eye-rx eye-ry pupil-cy pupil-r mouth-y], :as measures} dev?])), :test true}, pause-mode {:protocol-inline nil, :name shapes.dev/pause-mode, :variadic false, :file "dev/shapes/dev.cljs", :end-column 20, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 460, :end-line 460, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :test true}, t108894 {:num-fields 12, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.dev/t108894, :file "dev/shapes/dev.cljs", :type true, :anonymous true, :column 1, :line 506, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, section-controls {:protocol-inline nil, :name shapes.dev/section-controls, :variadic false, :file "dev/shapes/dev.cljs", :end-column 26, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 489, :end-line 489, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :test true}, ys-within-ellipse {:protocol-inline nil, :name shapes.dev/ys-within-ellipse, :variadic false, :file "dev/shapes/dev.cljs", :end-column 24, :method-params ([x a b h k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 5}), :line 36, :end-line 36, :max-fixed-arity 5, :fn-var true, :arglists (quote ([x a b h k])), :test true}, ->t108894 {:protocol-inline nil, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.dev/->t108894, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([input-schema108877 owner data input-checker108878 output-checker108879 validate__17001__auto__ G__108881 G__108880 app ufv__ output-schema108876 meta108895]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :methods ({:tag shapes.dev/t108894, :variadic false, :max-fixed-arity 12}), :line 506, :max-fixed-arity 12, :fn-var true, :arglists (quote ([input-schema108877 owner data input-checker108878 output-checker108879 validate__17001__auto__ G__108881 G__108880 app ufv__ output-schema108876 meta108895])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, eyes {:protocol-inline nil, :name shapes.dev/eyes, :variadic false, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([p__108838 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [head-cx head-cy head-width head-height head-rx head-ry], :as measures} dev?])), :test true}, sqrt {:protocol-inline nil, :name shapes.dev/sqrt, :variadic false, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, draw-mouth {:protocol-inline nil, :name shapes.dev/draw-mouth, :variadic false, :file "dev/shapes/dev.cljs", :end-column 20, :method-params ([p__108853]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 340, :end-line 340, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [mouth-cx mouth-cy mouth-rx mouth-ry mouth-clip-x mouth-clip-y mouth-clip-width mouth-clip-height]}])), :test true}, xy-on-circle {:protocol-inline nil, :name shapes.dev/xy-on-circle, :variadic false, :file "dev/shapes/dev.cljs", :end-column 19, :method-params ([pupil-r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pupil-r])), :test true}, mouth {:protocol-inline nil, :name shapes.dev/mouth, :variadic false, :file "dev/shapes/dev.cljs", :end-column 12, :method-params ([p__108850 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 299, :end-line 299, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [head-height head-cx head-cy head-rx head-ry eye-cxa eye-cxb eye-cy eye-ry nose-cy], :as measures} dev?])), :test true}, bezier-nose-mouth-overlap {:file "dev/shapes/dev.cljs", :line 573, :column 1, :end-line 573, :end-column 35, :test true, :name shapes.dev/bezier-nose-mouth-overlap}, println {:protocol-inline nil, :name shapes.dev/println, :variadic true, :file "dev/shapes/dev.cljs", :end-column 14, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 0}), :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& content])), :test true}, color-scale {:file "dev/shapes/dev.cljs", :line 12, :column 1, :end-line 12, :end-column 17, :test true, :name shapes.dev/color-scale}, ->t108882 {:protocol-inline nil, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.dev/->t108882, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([input-schema108877 owner data input-checker108878 output-checker108879 validate__17001__auto__ G__108881 G__108880 app ufv__ output-schema108876 meta108883]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :methods ({:tag shapes.dev/t108882, :variadic false, :max-fixed-arity 12}), :line 506, :max-fixed-arity 12, :fn-var true, :arglists (quote ([input-schema108877 owner data input-checker108878 output-checker108879 validate__17001__auto__ G__108881 G__108880 app ufv__ output-schema108876 meta108883])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, draw-eyes {:protocol-inline nil, :name shapes.dev/draw-eyes, :variadic false, :file "dev/shapes/dev.cljs", :end-column 19, :method-params ([p__108841]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [eye-cxa eye-cxb eye-cy eye-rx eye-ry pupil-r pupil-cxa pupil-cxb pupil-cy highlight-cxa highlight-cxb highlight-cy highlight-r]}])), :test true}, section-face {:protocol-inline nil, :name shapes.dev/section-face, :variadic false, :file "dev/shapes/dev.cljs", :end-column 22, :method-params ([p__108864]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 406, :end-line 406, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [horizontal-a horizontal-b vertical-a vertical-b head-cx head-cy head-rx head-ry]}])), :test true}, head {:protocol-inline nil, :name shapes.dev/head, :variadic false, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([p__108856 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 355, :end-line 355, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [cx cy width height]} dev?])), :test true}, app-state {:file "dev/shapes/dev.cljs", :line 420, :column 1, :end-line 420, :end-column 19, :test true, :name shapes.dev/app-state}, ->app {:protocol-inline nil, :name shapes.dev/->app, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([cursor__18789__auto__] [cursor__18789__auto__ m108875]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 506, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cursor__18789__auto__] [cursor__18789__auto__ m108875])), :test true}, draw-nose {:protocol-inline nil, :name shapes.dev/draw-nose, :variadic false, :file "dev/shapes/dev.cljs", :end-column 19, :method-params ([p__108847]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 266, :end-line 266, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [nose-cx nose-cy nose-rx nose-ry nose-clip-x nose-clip-y nose-clip-width nose-clip-height]}])), :test true}, face {:protocol-inline nil, :name shapes.dev/face, :variadic true, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([dev? p__108859]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic true, :max-fixed-arity 1}), :line 392, :end-line 392, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dev? & {:keys [proportional?]}])), :test true}, basic-measurements {:protocol-inline nil, :name shapes.dev/basic-measurements, :variadic false, :file "dev/shapes/dev.cljs", :end-column 25, :method-params ([dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 365, :end-line 365, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dev?])), :test true}, app {:schema (schema.core/make-fn-schema output-schema108876 [input-schema108877]), :protocol-inline nil, :name shapes.dev/app, :variadic false, :file "dev/shapes/dev.cljs", :end-column 18, :method-params ([G__108880 G__108881]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag shapes.dev/t108894, :variadic false, :max-fixed-arity 2}), :raw-arglists (quote ([data owner])), :line 506, :end-line 506, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data owner])), :doc "Inputs: [data owner]", :test true}, square {:protocol-inline nil, :name shapes.dev/square, :variadic false, :file "dev/shapes/dev.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, dev-mode {:protocol-inline nil, :name shapes.dev/dev-mode, :variadic false, :file "dev/shapes/dev.cljs", :end-column 18, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 424, :end-line 424, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :test true}, pupils {:protocol-inline nil, :name shapes.dev/pupils, :variadic false, :file "dev/shapes/dev.cljs", :end-column 13, :method-params ([p__108835 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [eye-cxa eye-cxb eye-cy eye-rx eye-ry eye-cy], :as measures} dev?])), :test true}, t108882 {:num-fields 12, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.dev/t108882, :file "dev/shapes/dev.cljs", :type true, :anonymous true, :column 1, :line 506, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, avg {:protocol-inline nil, :name shapes.dev/avg, :variadic true, :file "dev/shapes/dev.cljs", :end-column 10, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic true, :max-fixed-arity 0}), :line 28, :end-line 28, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& xs])), :test true}}, :name shapes.dev, :doc nil, :excludes #{println}, :use-macros {sel1 dommy.core, html sablono.core, defcomponent om-tools.core, defhtml sablono.core}, :require-macros {dommy.core dommy.core, om-tools.core om-tools.core, html sablono.core, sablono.core sablono.core, om.core om.core, om om.core}, :uses nil, :requires {p shapes.proportional, weasel.repl weasel.repl, html sablono.core, om-tools.core om-tools.core, sablono.core sablono.core, figwheel.client figwheel.client, shapes.proportional shapes.proportional, om.core om.core, figwheel figwheel.client, dommy.core dommy.core, om om.core, repl weasel.repl}, :imports nil}