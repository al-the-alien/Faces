;; Analyzed by ClojureScript 0.0-2816
{:defs {eyes {:protocol-inline nil, :name shapes.dev/eyes, :variadic false, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([p__54936]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [x y width height]}])), :test true}, draw-shape {:protocol-inline nil, :name shapes.dev/draw-shape, :variadic false, :file "dev/shapes/dev.cljs", :end-column 20, :method-params ([p__54946]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [x y width height stroke on-click]}])), :test true}, t54963 {:num-fields 12, :protocols #{om.core/IRenderState om.core/IDisplayName cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name shapes.dev/t54963, :file "dev/shapes/dev.cljs", :type true, :anonymous true, :column 1, :line 88, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t54956 {:num-fields 12, :protocols #{om.core/IRenderState om.core/IDisplayName cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name shapes.dev/t54956, :file "dev/shapes/dev.cljs", :type true, :anonymous true, :column 1, :line 88, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, println {:protocol-inline nil, :name shapes.dev/println, :variadic true, :file "dev/shapes/dev.cljs", :end-column 14, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 0}), :line 11, :end-line 11, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& content])), :test true}, ->t54963 {:protocol-inline nil, :protocols #{om.core/IRenderState om.core/IDisplayName cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name shapes.dev/->t54963, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([owner data validate__16797__auto__ input-schema54951 output-checker54953 G__54954 output-schema54950 G__54955 input-checker54952 app ufv__ meta54964]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :methods ({:tag shapes.dev/t54963, :variadic false, :max-fixed-arity 12}), :line 88, :max-fixed-arity 12, :fn-var true, :arglists (quote ([owner data validate__16797__auto__ input-schema54951 output-checker54953 G__54954 output-schema54950 G__54955 input-checker54952 app ufv__ meta54964])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t54956 {:protocol-inline nil, :protocols #{om.core/IRenderState om.core/IDisplayName cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name shapes.dev/->t54956, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([owner data validate__16797__auto__ input-schema54951 output-checker54953 G__54954 output-schema54950 G__54955 input-checker54952 app ufv__ meta54957]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :methods ({:tag shapes.dev/t54956, :variadic false, :max-fixed-arity 12}), :line 88, :max-fixed-arity 12, :fn-var true, :arglists (quote ([owner data validate__16797__auto__ input-schema54951 output-checker54953 G__54954 output-schema54950 G__54955 input-checker54952 app ufv__ meta54957])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, combine {:protocol-inline nil, :name shapes.dev/combine, :variadic false, :file "dev/shapes/dev.cljs", :end-column 14, :method-params ([owner p__54943 b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 58, :end-line 58, :max-fixed-arity 3, :fn-var true, :arglists (quote ([owner {:keys [x y width height], :as a} b])), :test true}, draw-eyes {:protocol-inline nil, :name shapes.dev/draw-eyes, :variadic false, :file "dev/shapes/dev.cljs", :end-column 19, :method-params ([p__54939]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [cy cx-a cx-b rx ry prx pry pcxa pcxb pcy]}])), :test true}, app-state {:file "dev/shapes/dev.cljs", :line 16, :column 1, :end-line 16, :end-column 19, :test true, :name shapes.dev/app-state}, ->app {:protocol-inline nil, :name shapes.dev/->app, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([cursor__21115__auto__] [cursor__21115__auto__ m54949]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cursor__21115__auto__] [cursor__21115__auto__ m54949])), :test true}, app {:schema (schema.core/make-fn-schema output-schema54950 [input-schema54951]), :protocol-inline nil, :name shapes.dev/app, :variadic false, :file "dev/shapes/dev.cljs", :end-column 18, :method-params ([G__54954 G__54955]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag shapes.dev/t54963, :variadic false, :max-fixed-arity 2}), :raw-arglists (quote ([data owner])), :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data owner])), :doc "Inputs: [data owner]", :test true}, shape {:protocol-inline nil, :name shapes.dev/shape, :variadic false, :file "dev/shapes/dev.cljs", :end-column 12, :method-params ([owner x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 3}), :line 64, :end-line 64, :max-fixed-arity 3, :fn-var true, :arglists (quote ([owner x y])), :test true}}, :name shapes.dev, :doc nil, :excludes #{println}, :use-macros {sel1 dommy.core, html sablono.core, defcomponent om-tools.core, defhtml sablono.core}, :require-macros {dommy.core dommy.core, om-tools.core om-tools.core, html sablono.core, sablono.core sablono.core, om.core om.core, om om.core}, :uses nil, :requires {weasel.repl weasel.repl, html sablono.core, om-tools.core om-tools.core, sablono.core sablono.core, figwheel.client figwheel.client, om.core om.core, figwheel figwheel.client, dommy.core dommy.core, om om.core, repl weasel.repl}, :imports nil}