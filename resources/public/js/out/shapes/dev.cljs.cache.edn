;; Analyzed by ClojureScript 0.0-2816
{:defs {pause-mode {:protocol-inline nil, :name shapes.dev/pause-mode, :variadic false, :file "dev/shapes/dev.cljs", :end-column 20, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :test true}, section-controls {:protocol-inline nil, :name shapes.dev/section-controls, :variadic false, :file "dev/shapes/dev.cljs", :end-column 26, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :test true}, ->t167268 {:protocol-inline nil, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.dev/->t167268, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([input-schema167250 owner data G__167254 output-schema167249 validate__17001__auto__ input-checker167251 G__167253 output-checker167252 app ufv__ meta167269]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :methods ({:tag shapes.dev/t167268, :variadic false, :max-fixed-arity 12}), :line 105, :max-fixed-arity 12, :fn-var true, :arglists (quote ([input-schema167250 owner data G__167254 output-schema167249 validate__17001__auto__ input-checker167251 G__167253 output-checker167252 app ufv__ meta167269])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t167255 {:protocol-inline nil, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.dev/->t167255, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([input-schema167250 owner data G__167254 output-schema167249 validate__17001__auto__ input-checker167251 G__167253 output-checker167252 app ufv__ meta167256]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :methods ({:tag shapes.dev/t167255, :variadic false, :max-fixed-arity 12}), :line 105, :max-fixed-arity 12, :fn-var true, :arglists (quote ([input-schema167250 owner data G__167254 output-schema167249 validate__17001__auto__ input-checker167251 G__167253 output-checker167252 app ufv__ meta167256])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, bezier-nose-mouth-overlap {:file "dev/shapes/dev.cljs", :line 189, :column 1, :end-line 189, :end-column 35, :test true, :name shapes.dev/bezier-nose-mouth-overlap}, println {:protocol-inline nil, :name shapes.dev/println, :variadic true, :file "dev/shapes/dev.cljs", :end-column 14, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 0}), :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& content])), :test true}, color-scale {:file "dev/shapes/dev.cljs", :line 13, :column 1, :end-line 13, :end-column 17, :test true, :name shapes.dev/color-scale}, t167255 {:num-fields 12, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.dev/t167255, :file "dev/shapes/dev.cljs", :type true, :anonymous true, :column 1, :line 105, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, section-face {:protocol-inline nil, :name shapes.dev/section-face, :variadic false, :file "dev/shapes/dev.cljs", :end-column 22, :method-params ([p__167237]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [horizontal-a horizontal-b horizontal-c vertical-a vertical-b head-cx head-cy head-rx head-ry]}])), :test true}, app-state {:file "dev/shapes/dev.cljs", :line 23, :column 1, :end-line 23, :end-column 19, :test true, :name shapes.dev/app-state}, t167268 {:num-fields 12, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.dev/t167268, :file "dev/shapes/dev.cljs", :type true, :anonymous true, :column 1, :line 105, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->app {:protocol-inline nil, :name shapes.dev/->app, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([cursor__18789__auto__] [cursor__18789__auto__ m167248]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cursor__18789__auto__] [cursor__18789__auto__ m167248])), :test true}, app {:schema (schema.core/make-fn-schema output-schema167249 [input-schema167250]), :protocol-inline nil, :name shapes.dev/app, :variadic false, :file "dev/shapes/dev.cljs", :end-column 18, :method-params ([G__167253 G__167254]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag shapes.dev/t167268, :variadic false, :max-fixed-arity 2}), :raw-arglists (quote ([data owner])), :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data owner])), :doc "Inputs: [data owner]", :test true}, dev-mode {:protocol-inline nil, :name shapes.dev/dev-mode, :variadic false, :file "dev/shapes/dev.cljs", :end-column 18, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data])), :test true}}, :name shapes.dev, :doc nil, :excludes #{println}, :use-macros {sel1 dommy.core, html sablono.core, defcomponent om-tools.core, defhtml sablono.core}, :require-macros {dommy.core dommy.core, om-tools.core om-tools.core, html sablono.core, sablono.core sablono.core, om.core om.core, om om.core}, :uses nil, :requires {shapes.core shapes.core, p shapes.proportional, weasel.repl weasel.repl, html sablono.core, om-tools.core om-tools.core, sablono.core sablono.core, figwheel.client figwheel.client, shapes.proportional shapes.proportional, om.core om.core, figwheel figwheel.client, dommy.core dommy.core, om om.core, repl weasel.repl, core shapes.core}, :imports nil}