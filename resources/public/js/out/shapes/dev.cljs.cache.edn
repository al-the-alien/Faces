;; Analyzed by ClojureScript 0.0-2816
{:defs {rect {:protocol-inline nil, :name shapes.dev/rect, :variadic false, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 78, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}, lilify {:protocol-inline nil, :name shapes.dev/lilify, :variadic false, :file "dev/shapes/dev.cljs", :end-column 13, :method-params ([owner p__50600 shape2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 34, :end-line 34, :max-fixed-arity 3, :fn-var true, :arglists (quote ([owner {:keys [x y width height], :as shape1} shape2])), :test true}, draw-rect {:protocol-inline nil, :name shapes.dev/draw-rect, :variadic false, :file "dev/shapes/dev.cljs", :end-column 19, :method-params ([owner p__50603]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([owner {:keys [id x y width height stroke clip-id], :as shape}])), :test true}, t50613 {:num-fields 12, :protocols #{om.core/IRenderState om.core/IDisplayName cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name shapes.dev/t50613, :file "dev/shapes/dev.cljs", :type true, :anonymous true, :column 1, :line 104, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, println {:protocol-inline nil, :name shapes.dev/println, :variadic true, :file "dev/shapes/dev.cljs", :end-column 14, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 0}), :line 11, :end-line 11, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& content])), :test true}, combine {:protocol-inline nil, :name shapes.dev/combine, :variadic false, :file "dev/shapes/dev.cljs", :end-column 14, :method-params ([owner shape1 shape2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 3}), :line 52, :end-line 52, :max-fixed-arity 3, :fn-var true, :arglists (quote ([owner shape1 shape2])), :test true}, ->t50613 {:protocol-inline nil, :protocols #{om.core/IRenderState om.core/IDisplayName cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name shapes.dev/->t50613, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([owner output-checker50610 data validate__16797__auto__ output-schema50607 input-schema50608 G__50612 G__50611 input-checker50609 app ufv__ meta50614]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :methods ({:tag shapes.dev/t50613, :variadic false, :max-fixed-arity 12}), :line 104, :max-fixed-arity 12, :fn-var true, :arglists (quote ([owner output-checker50610 data validate__16797__auto__ output-schema50607 input-schema50608 G__50612 G__50611 input-checker50609 app ufv__ meta50614])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, draw-lil {:protocol-inline nil, :name shapes.dev/draw-lil, :variadic false, :file "dev/shapes/dev.cljs", :end-column 18, :method-params ([owner p__50491]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([owner {:keys [stroke shape-data]}])), :test true}, ->t50638 {:protocol-inline nil, :protocols #{om.core/IRenderState om.core/IDisplayName cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name shapes.dev/->t50638, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([owner output-checker50610 data validate__16797__auto__ output-schema50607 input-schema50608 G__50612 G__50611 input-checker50609 app ufv__ meta50639]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :methods ({:tag shapes.dev/t50638, :variadic false, :max-fixed-arity 12}), :line 104, :max-fixed-arity 12, :fn-var true, :arglists (quote ([owner output-checker50610 data validate__16797__auto__ output-schema50607 input-schema50608 G__50612 G__50611 input-checker50609 app ufv__ meta50639])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, app-state {:file "dev/shapes/dev.cljs", :line 16, :column 1, :end-line 16, :end-column 19, :test true, :name shapes.dev/app-state}, ->app {:protocol-inline nil, :name shapes.dev/->app, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([cursor__21115__auto__] [cursor__21115__auto__ m50606]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 104, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cursor__21115__auto__] [cursor__21115__auto__ m50606])), :test true}, app {:schema (schema.core/make-fn-schema output-schema50607 [input-schema50608]), :protocol-inline nil, :name shapes.dev/app, :variadic false, :file "dev/shapes/dev.cljs", :end-column 18, :method-params ([G__50611 G__50612]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag shapes.dev/t50638, :variadic false, :max-fixed-arity 2}), :raw-arglists (quote ([data owner])), :line 104, :end-line 104, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data owner])), :doc "Inputs: [data owner]", :test true}, square {:protocol-inline nil, :name shapes.dev/square, :variadic false, :file "dev/shapes/dev.cljs", :end-column 13, :method-params ([x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([x y])), :test true}, t50638 {:num-fields 12, :protocols #{om.core/IRenderState om.core/IDisplayName cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name shapes.dev/t50638, :file "dev/shapes/dev.cljs", :type true, :anonymous true, :column 1, :line 104, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :name shapes.dev, :doc nil, :excludes #{println}, :use-macros {sel1 dommy.core, html sablono.core, defcomponent om-tools.core, defhtml sablono.core}, :require-macros {dommy.core dommy.core, om-tools.core om-tools.core, html sablono.core, sablono.core sablono.core, om.core om.core, om om.core}, :uses nil, :requires {weasel.repl weasel.repl, html sablono.core, om-tools.core om-tools.core, sablono.core sablono.core, figwheel.client figwheel.client, om.core om.core, figwheel figwheel.client, dommy.core dommy.core, om om.core, repl weasel.repl}, :imports nil}