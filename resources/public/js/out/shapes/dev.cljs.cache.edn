;; Analyzed by ClojureScript 0.0-2816
{:defs {nose {:protocol-inline nil, :name shapes.dev/nose, :variadic false, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([p__48737 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 219, :end-line 219, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [head-cx head-cy eye-cxa eye-cxb eye-cy], :as measures} dev?])), :test true}, t48759 {:num-fields 12, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.dev/t48759, :file "dev/shapes/dev.cljs", :type true, :anonymous true, :column 1, :line 264, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t48755 {:protocol-inline nil, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.dev/->t48755, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([owner data output-checker48752 G__48753 validate__17001__auto__ input-schema48750 G__48754 output-schema48749 app ufv__ input-checker48751 meta48756]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :methods ({:tag shapes.dev/t48755, :variadic false, :max-fixed-arity 12}), :line 264, :max-fixed-arity 12, :fn-var true, :arglists (quote ([owner data output-checker48752 G__48753 validate__17001__auto__ input-schema48750 G__48754 output-schema48749 app ufv__ input-checker48751 meta48756])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ys-within-ellipse {:protocol-inline nil, :name shapes.dev/ys-within-ellipse, :variadic false, :file "dev/shapes/dev.cljs", :end-column 24, :method-params ([x a b h k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 5}), :line 26, :end-line 26, :max-fixed-arity 5, :fn-var true, :arglists (quote ([x a b h k])), :test true}, eyes {:protocol-inline nil, :name shapes.dev/eyes, :variadic false, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([p__48731 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 135, :end-line 135, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [head-cx head-cy head-width head-height head-rx head-ry], :as measures} dev?])), :test true}, sqrt {:protocol-inline nil, :name shapes.dev/sqrt, :variadic false, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, ->t48759 {:protocol-inline nil, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.dev/->t48759, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([owner data output-checker48752 G__48753 validate__17001__auto__ input-schema48750 G__48754 output-schema48749 app ufv__ input-checker48751 meta48760]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :methods ({:tag shapes.dev/t48759, :variadic false, :max-fixed-arity 12}), :line 264, :max-fixed-arity 12, :fn-var true, :arglists (quote ([owner data output-checker48752 G__48753 validate__17001__auto__ input-schema48750 G__48754 output-schema48749 app ufv__ input-checker48751 meta48760])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, println {:protocol-inline nil, :name shapes.dev/println, :variadic true, :file "dev/shapes/dev.cljs", :end-column 14, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 0}), :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& content])), :test true}, t48755 {:num-fields 12, :protocols #{om.core/IRender om.core/IDisplayName cljs.core/IMeta cljs.core/IWithMeta}, :name shapes.dev/t48755, :file "dev/shapes/dev.cljs", :type true, :anonymous true, :column 1, :line 264, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, draw-eyes {:protocol-inline nil, :name shapes.dev/draw-eyes, :variadic false, :file "dev/shapes/dev.cljs", :end-column 19, :method-params ([p__48734]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 184, :end-line 184, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [eye-cxa eye-cxb eye-cy eye-rx eye-ry pupil-r pupil-cxa pupil-cxb pupil-cy highlight-cxa highlight-cxb highlight-cy highlight-r]}])), :test true}, head {:protocol-inline nil, :name shapes.dev/head, :variadic false, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([p__48740 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 226, :end-line 226, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [cx cy width height]} dev?])), :test true}, app-state {:file "dev/shapes/dev.cljs", :line 260, :column 1, :end-line 260, :end-column 19, :test true, :name shapes.dev/app-state}, ->app {:protocol-inline nil, :name shapes.dev/->app, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([cursor__18789__auto__] [cursor__18789__auto__ m48748]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 264, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cursor__18789__auto__] [cursor__18789__auto__ m48748])), :test true}, face {:protocol-inline nil, :name shapes.dev/face, :variadic true, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([dev? p__48743]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic true, :max-fixed-arity 1}), :line 247, :end-line 247, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dev? & {:keys [proportional?]}])), :test true}, basic-measurements {:protocol-inline nil, :name shapes.dev/basic-measurements, :variadic false, :file "dev/shapes/dev.cljs", :end-column 25, :method-params ([dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 236, :end-line 236, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dev?])), :test true}, app {:schema (schema.core/make-fn-schema output-schema48749 [input-schema48750]), :protocol-inline nil, :name shapes.dev/app, :variadic false, :file "dev/shapes/dev.cljs", :end-column 18, :method-params ([G__48753 G__48754]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag shapes.dev/t48759, :variadic false, :max-fixed-arity 2}), :raw-arglists (quote ([data owner])), :line 264, :end-line 264, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data owner])), :doc "Inputs: [data owner]", :test true}, square {:protocol-inline nil, :name shapes.dev/square, :variadic false, :file "dev/shapes/dev.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, pupils {:protocol-inline nil, :name shapes.dev/pupils, :variadic false, :file "dev/shapes/dev.cljs", :end-column 13, :method-params ([p__48728 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [eye-cxa eye-cxb eye-cy eye-rx eye-ry eye-cy], :as measures} dev?])), :test true}}, :name shapes.dev, :doc nil, :excludes #{println}, :use-macros {sel1 dommy.core, html sablono.core, defcomponent om-tools.core, defhtml sablono.core}, :require-macros {dommy.core dommy.core, om-tools.core om-tools.core, html sablono.core, sablono.core sablono.core, om.core om.core, om om.core}, :uses nil, :requires {p shapes.proportional, weasel.repl weasel.repl, html sablono.core, om-tools.core om-tools.core, sablono.core sablono.core, figwheel.client figwheel.client, shapes.proportional shapes.proportional, om.core om.core, figwheel figwheel.client, dommy.core dommy.core, om om.core, repl weasel.repl}, :imports nil}