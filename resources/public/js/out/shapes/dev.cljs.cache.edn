;; Analyzed by ClojureScript 0.0-2816
{:defs {nose {:protocol-inline nil, :name shapes.dev/nose, :variadic false, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([p__37734 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [head-cx head-cy eye-cxa eye-cxb eye-cy], :as measures} dev?])), :test true}, t37758 {:num-fields 12, :protocols #{om.core/IRenderState om.core/IDisplayName cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name shapes.dev/t37758, :file "dev/shapes/dev.cljs", :type true, :anonymous true, :column 1, :line 195, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ys-within-ellipse {:protocol-inline nil, :name shapes.dev/ys-within-ellipse, :variadic false, :file "dev/shapes/dev.cljs", :end-column 24, :method-params ([x a b h k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 5}), :line 26, :end-line 26, :max-fixed-arity 5, :fn-var true, :arglists (quote ([x a b h k])), :test true}, eyes {:protocol-inline nil, :name shapes.dev/eyes, :variadic false, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([p__37728 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [head-cx head-cy head-width head-height head-rx], :as measures} dev?])), :test true}, sqrt {:protocol-inline nil, :name shapes.dev/sqrt, :variadic false, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, ->t37752 {:protocol-inline nil, :protocols #{om.core/IRenderState om.core/IDisplayName cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name shapes.dev/->t37752, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([owner data G__37751 input-checker37748 validate__17001__auto__ output-schema37746 G__37750 output-checker37749 app ufv__ input-schema37747 meta37753]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :methods ({:tag shapes.dev/t37752, :variadic false, :max-fixed-arity 12}), :line 195, :max-fixed-arity 12, :fn-var true, :arglists (quote ([owner data G__37751 input-checker37748 validate__17001__auto__ output-schema37746 G__37750 output-checker37749 app ufv__ input-schema37747 meta37753])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, println {:protocol-inline nil, :name shapes.dev/println, :variadic true, :file "dev/shapes/dev.cljs", :end-column 14, :method-params ([content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 0}), :line 12, :end-line 12, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& content])), :test true}, draw-eyes {:protocol-inline nil, :name shapes.dev/draw-eyes, :variadic false, :file "dev/shapes/dev.cljs", :end-column 19, :method-params ([p__37731]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [eye-cxa eye-cxb eye-cy eye-rx eye-ry pupil-r pupil-cxa pupil-cxb pupil-cy highlight-cxa highlight-cxb highlight-cy highlight-r]}])), :test true}, head {:protocol-inline nil, :name shapes.dev/head, :variadic false, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([p__37737 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 161, :end-line 161, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [cx cy width height]} dev?])), :test true}, app-state {:file "dev/shapes/dev.cljs", :line 35, :column 1, :end-line 35, :end-column 19, :test true, :name shapes.dev/app-state}, ->app {:protocol-inline nil, :name shapes.dev/->app, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([cursor__18789__auto__] [cursor__18789__auto__ m37745]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1} {:tag any, :variadic false, :max-fixed-arity 2}), :line 195, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cursor__18789__auto__] [cursor__18789__auto__ m37745])), :test true}, face {:protocol-inline nil, :name shapes.dev/face, :variadic true, :file "dev/shapes/dev.cljs", :end-column 11, :method-params ([dev? p__37740]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic true, :max-fixed-arity 1}), :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dev? & {:keys [proportional?]}])), :test true}, t37752 {:num-fields 12, :protocols #{om.core/IRenderState om.core/IDisplayName cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name shapes.dev/t37752, :file "dev/shapes/dev.cljs", :type true, :anonymous true, :column 1, :line 195, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, basic-measurements {:protocol-inline nil, :name shapes.dev/basic-measurements, :variadic false, :file "dev/shapes/dev.cljs", :end-column 25, :method-params ([dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 171, :end-line 171, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dev?])), :test true}, ->t37758 {:protocol-inline nil, :protocols #{om.core/IRenderState om.core/IDisplayName cljs.core/IMeta om.core/IInitState cljs.core/IWithMeta}, :name shapes.dev/->t37758, :variadic false, :file "dev/shapes/dev.cljs", :method-params ([owner data G__37751 input-checker37748 validate__17001__auto__ output-schema37746 G__37750 output-checker37749 app ufv__ input-schema37747 meta37759]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 1, :factory :positional, :methods ({:tag shapes.dev/t37758, :variadic false, :max-fixed-arity 12}), :line 195, :max-fixed-arity 12, :fn-var true, :arglists (quote ([owner data G__37751 input-checker37748 validate__17001__auto__ output-schema37746 G__37750 output-checker37749 app ufv__ input-schema37747 meta37759])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, app {:schema (schema.core/make-fn-schema output-schema37746 [input-schema37747]), :protocol-inline nil, :name shapes.dev/app, :variadic false, :file "dev/shapes/dev.cljs", :end-column 18, :method-params ([G__37750 G__37751]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag shapes.dev/t37758, :variadic false, :max-fixed-arity 2}), :raw-arglists (quote ([data owner])), :line 195, :end-line 195, :max-fixed-arity 2, :fn-var true, :arglists (quote ([data owner])), :doc "Inputs: [data owner]", :test true}, square {:protocol-inline nil, :name shapes.dev/square, :variadic false, :file "dev/shapes/dev.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag number, :variadic false, :max-fixed-arity 1}), :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, pupils {:protocol-inline nil, :name shapes.dev/pupils, :variadic false, :file "dev/shapes/dev.cljs", :end-column 13, :method-params ([p__37725 dev?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [eye-cxa eye-cxb eye-cy eye-rx eye-ry eye-cy]} dev?])), :test true}}, :name shapes.dev, :doc nil, :excludes #{println}, :use-macros {sel1 dommy.core, html sablono.core, defcomponent om-tools.core, defhtml sablono.core}, :require-macros {dommy.core dommy.core, om-tools.core om-tools.core, html sablono.core, sablono.core sablono.core, om.core om.core, om om.core}, :uses nil, :requires {p shapes.proportional, weasel.repl weasel.repl, html sablono.core, om-tools.core om-tools.core, sablono.core sablono.core, figwheel.client figwheel.client, shapes.proportional shapes.proportional, om.core om.core, figwheel figwheel.client, dommy.core dommy.core, om om.core, repl weasel.repl}, :imports nil}