;; Analyzed by ClojureScript 0.0-3308
{:use-macros nil, :excludes #{Symbol defn defmethod letfn Keyword defrecord}, :name schema.core, :imports nil, :requires {str clojure.string, clojure.string clojure.string, utils schema.utils, schema.utils schema.utils}, :uses nil, :defs {->Predicate {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 302, :column 25, :end-line 302, :end-column 34, :internal-ctor true, :factory :positional, :arglists (quote ([p? pred-name]))}, :name schema.core/->Predicate, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 34, :method-params ([p? pred-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 302, :end-line 302, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p? pred-name]))}, ConditionalSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/ConditionalSchema, :file "resources/public/js/out/schema/core.cljs", :end-column 42, :type true, :column 25, :internal-ctor true, :line 501, :record true, :end-line 501, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, arity {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 916, :column 21, :end-line 916, :end-column 26, :private true, :arglists (quote ([input-schema]))}, :private true, :name schema.core/arity, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 26, :method-params ([input-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 916, :end-line 916, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-schema]))}, map->FnSchema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 904, :column 25, :end-line 904, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__29177]))}, :name schema.core/map->FnSchema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :method-params ([G__29177]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 904, :end-line 904, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__29177]))}, ->One {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 777, :column 25, :end-line 777, :end-column 28, :internal-ctor true, :factory :positional, :arglists (quote ([schema optional? name]))}, :name schema.core/->One, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 28, :method-params ([schema optional? name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 777, :end-line 777, :max-fixed-arity 3, :fn-var true, :arglists (quote ([schema optional? name]))}, named {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 444, :column 20, :end-line 444, :end-column 25, :arglists (quote ([schema name])), :doc "A value that must satisfy schema, and has a name for documentation purposes."}, :name schema.core/named, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 25, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 444, :end-line 444, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A value that must satisfy schema, and has a name for documentation purposes."}, optional-key {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 610, :column 20, :end-line 610, :end-column 32, :arglists (quote ([k])), :doc "An optional key in a map"}, :name schema.core/optional-key, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 32, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 610, :end-line 610, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "An optional key in a map"}, Protocol {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Protocol, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 334, :record true, :end-line 334, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->AnythingSchema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 234, :column 25, :end-line 234, :end-column 39, :internal-ctor true, :factory :map, :arglists (quote ([G__28935]))}, :name schema.core/map->AnythingSchema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 39, :method-params ([G__28935]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 234, :end-line 234, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28935]))}, map-explain {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 734, :column 21, :end-line 734, :end-column 32, :private true, :arglists (quote ([this]))}, :private true, :name schema.core/map-explain, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 32, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 734, :end-line 734, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, Maybe {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Maybe, :file "resources/public/js/out/schema/core.cljs", :end-column 30, :type true, :column 25, :internal-ctor true, :line 420, :record true, :end-line 420, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, MapEntry {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/MapEntry, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 640, :record true, :end-line 640, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, One {:num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/One, :file "resources/public/js/out/schema/core.cljs", :end-column 28, :type true, :column 25, :internal-ctor true, :line 777, :record true, :end-line 777, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->Isa {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 264, :column 25, :end-line 264, :end-column 28, :internal-ctor true, :factory :positional, :arglists (quote ([h parent]))}, :name schema.core/->Isa, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 28, :method-params ([h parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 264, :end-line 264, :max-fixed-arity 2, :fn-var true, :arglists (quote ([h parent]))}, map->ConditionalSchema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 501, :column 25, :end-line 501, :end-column 42, :internal-ctor true, :factory :map, :arglists (quote ([G__29026]))}, :name schema.core/map->ConditionalSchema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 42, :method-params ([G__29026]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 501, :end-line 501, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__29026]))}, NamedSchema {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/NamedSchema, :file "resources/public/js/out/schema/core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 437, :record true, :end-line 437, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->MapEntry {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 640, :column 25, :end-line 640, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__29067]))}, :name schema.core/map->MapEntry, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :method-params ([G__29067]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 640, :end-line 640, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__29067]))}, required-key? {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 604, :column 20, :end-line 604, :end-column 33, :arglists (quote ([ks]))}, :name schema.core/required-key?, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 604, :end-line 604, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, ->Both {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 476, :column 25, :end-line 476, :end-column 29, :internal-ctor true, :factory :positional, :arglists (quote ([schemas]))}, :name schema.core/->Both, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 29, :method-params ([schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 476, :end-line 476, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schemas]))}, schema-with-name {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 955, :column 20, :end-line 955, :end-column 36, :arglists (quote ([schema name]))}, :name schema.core/schema-with-name, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 36, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 955, :end-line 955, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name]))}, Symbol {:name schema.core/Symbol, :file "resources/public/js/out/schema/core.cljs", :line 397, :column 1, :end-line 397, :end-column 12, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 397, :column 6, :end-line 397, :end-column 12}, :doc "A symbol"}, Either {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Either, :file "resources/public/js/out/schema/core.cljs", :end-column 31, :type true, :column 25, :internal-ctor true, :line 452, :record true, :end-line 452, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->One {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 777, :column 25, :end-line 777, :end-column 28, :internal-ctor true, :factory :map, :arglists (quote ([G__29125]))}, :name schema.core/map->One, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 28, :method-params ([G__29125]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 777, :end-line 777, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__29125]))}, fn-schema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 1045, :column 30, :end-line 1045, :end-column 39, :tag FnSchema, :arglists (quote ([f])), :doc "Produce the schema for a function defined with s/fn or s/defn."}, :name schema.core/fn-schema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 39, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1045, :ret-tag FnSchema, :end-line 1045, :max-fixed-arity 1, :tag FnSchema, :fn-var true, :arglists (quote ([f])), :doc "Produce the schema for a function defined with s/fn or s/defn."}, conditional {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 515, :column 20, :end-line 515, :end-column 31, :arglists (quote ([& preds-and-schemas])), :doc "Define a conditional schema.  Takes args like cond,\n   (conditional pred1 schema1 pred2 schema2 ...),\n   and checks the first schema where pred is true on the value.\n   Unlike cond, throws if the value does not match any condition.\n   :else may be used as a final condition in the place of (constantly true).\n   More efficient than either, since only one schema must be checked.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(preds-and-schemas)], :arglists ([& preds-and-schemas]), :arglists-meta (nil)}}, :name schema.core/conditional, :variadic true, :file "resources/public/js/out/schema/core.cljs", :end-column 31, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(preds-and-schemas)], :arglists ([& preds-and-schemas]), :arglists-meta (nil)}, :method-params [(preds-and-schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 515, :end-line 515, :max-fixed-arity 0, :fn-var true, :arglists ([& preds-and-schemas]), :doc "Define a conditional schema.  Takes args like cond,\n   (conditional pred1 schema1 pred2 schema2 ...),\n   and checks the first schema where pred is true on the value.\n   Unlike cond, throws if the value does not match any condition.\n   :else may be used as a final condition in the place of (constantly true).\n   More efficient than either, since only one schema must be checked."}, either {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 468, :column 20, :end-line 468, :end-column 26, :arglists (quote ([& schemas])), :doc "A value that must satisfy at least one schema in schemas.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}}, :name schema.core/either, :variadic true, :file "resources/public/js/out/schema/core.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}, :method-params [(schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 468, :end-line 468, :max-fixed-arity 0, :fn-var true, :arglists ([& schemas]), :doc "A value that must satisfy at least one schema in schemas."}, explicit-schema-key {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 619, :column 20, :end-line 619, :end-column 39, :arglists (quote ([ks]))}, :name schema.core/explicit-schema-key, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 39, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 619, :end-line 619, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, schema-name {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 959, :column 20, :end-line 959, :end-column 31, :arglists (quote ([schema]))}, :name schema.core/schema-name, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 31, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 959, :end-line 959, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema]))}, Bool {:name schema.core/Bool, :file "resources/public/js/out/schema/core.cljs", :line 381, :column 1, :end-line 381, :end-column 10, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 381, :column 6, :end-line 381, :end-column 10}, :doc "Boolean true or false"}, ->EqSchema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 248, :column 25, :end-line 248, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([v]))}, :name schema.core/->EqSchema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 248, :end-line 248, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, enum {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 294, :column 20, :end-line 294, :end-column 24, :arglists (quote ([& vs])), :doc "A value that must be = to some element of vs.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(vs)], :arglists ([& vs]), :arglists-meta (nil)}}, :name schema.core/enum, :variadic true, :file "resources/public/js/out/schema/core.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(vs)], :arglists ([& vs]), :arglists-meta (nil)}, :method-params [(vs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 0, :fn-var true, :arglists ([& vs]), :doc "A value that must be = to some element of vs."}, one {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 779, :column 20, :end-line 779, :end-column 23, :arglists (quote ([schema name])), :doc "A single required element of a sequence (not repeated, the implicit default)"}, :name schema.core/one, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 23, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 779, :end-line 779, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A single required element of a sequence (not repeated, the implicit default)"}, find-extra-keys-schema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 685, :column 20, :end-line 685, :end-column 42, :arglists (quote ([map-schema]))}, :name schema.core/find-extra-keys-schema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 42, :method-params ([map-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 685, :end-line 685, :max-fixed-arity 1, :fn-var true, :arglists (quote ([map-schema]))}, map->Predicate {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 302, :column 25, :end-line 302, :end-column 34, :internal-ctor true, :factory :map, :arglists (quote ([G__28971]))}, :name schema.core/map->Predicate, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 34, :method-params ([G__28971]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 302, :end-line 302, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28971]))}, map->RequiredKey {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 595, :column 25, :end-line 595, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__29051]))}, :name schema.core/map->RequiredKey, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 36, :method-params ([G__29051]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 595, :end-line 595, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__29051]))}, Record {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Record, :file "resources/public/js/out/schema/core.cljs", :end-column 31, :type true, :column 25, :internal-ctor true, :line 862, :record true, :end-line 862, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, parse-sequence-schema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 789, :column 20, :end-line 789, :end-column 41, :arglists (quote ([s]))}, :name schema.core/parse-sequence-schema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 41, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 789, :end-line 789, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, OptionalKey {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/OptionalKey, :file "resources/public/js/out/schema/core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 608, :record true, :end-line 608, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Record {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 862, :column 25, :end-line 862, :end-column 31, :internal-ctor true, :factory :map, :arglists (quote ([G__29165]))}, :name schema.core/map->Record, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 31, :method-params ([G__29165]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 862, :end-line 862, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__29165]))}, EqSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/EqSchema, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 248, :record true, :end-line 248, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, explain {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 112, :column 4, :end-line 112, :end-column 11, :protocol schema.core/Schema, :doc "Expand this schema to a human-readable format suitable for pprinting,\n     also expanding class schematas at the leaves.  Example:\n\n     user> (s/explain {:a s/Keyword :b [s/Int]} )\n     {:a Keyword, :b [Int]}", :arglists (quote ([this]))}, :protocol schema.core/Schema, :name schema.core/explain, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Expand this schema to a human-readable format suitable for pprinting,\n     also expanding class schematas at the leaves.  Example:\n\n     user> (s/explain {:a s/Keyword :b [s/Int]} )\n     {:a Keyword, :b [Int]}"}, ->RequiredKey {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 595, :column 25, :end-line 595, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([k]))}, :name schema.core/->RequiredKey, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 36, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 595, :end-line 595, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, subschema-walker {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 127, :column 16, :end-line 127, :end-column 32, :dynamic true}, :name schema.core/subschema-walker, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 32, :method-params ([s]), :protocol-impl nil, :arglists-meta (), :column 1, :dynamic true, :line 127, :end-line 127, :max-fixed-arity 1, :fn-var true, :arglists nil, :doc "The function to call within 'walker' implementations to create walkers for subschemas.\n   Can be dynamically bound (using start-walker below) to create different walking behaviors.\n\n   For the curious, implemented using dynamic binding rather than making walker take a\n   subschema-walker as an argument because some behaviors (e.g. recursive schema walkers)\n   seem to require mind-bending things like fixed-point combinators that way, but are\n   simple this way."}, map->Protocol {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 334, :column 25, :end-line 334, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__28983]))}, :name schema.core/map->Protocol, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :method-params ([G__28983]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 334, :end-line 334, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28983]))}, preserve-map-type {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 692, :column 21, :end-line 692, :end-column 38, :private true, :arglists (quote ([original walker-result]))}, :private true, :name schema.core/preserve-map-type, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 38, :method-params ([original walker-result]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 692, :end-line 692, :max-fixed-arity 2, :fn-var true, :arglists (quote ([original walker-result]))}, fn-validation? {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 1014, :column 20, :end-line 1014, :end-column 34, :arglists (quote ([])), :doc "Get the current global schema validation setting."}, :name schema.core/fn-validation?, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 34, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1014, :end-line 1014, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Get the current global schema validation setting."}, isa {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 275, :column 20, :end-line 275, :end-column 23, :arglists (quote ([parent] [h parent])), :doc "A value that must be a child of parent.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([parent] [h parent]), :arglists ([parent] [h parent]), :arglists-meta (nil nil)}}, :name schema.core/isa, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([parent] [h parent]), :arglists ([parent] [h parent]), :arglists-meta (nil nil)}, :method-params ([parent] [h parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 275, :end-line 275, :max-fixed-arity 2, :fn-var true, :arglists ([parent] [h parent]), :doc "A value that must be a child of parent."}, Num {:name schema.core/Num, :file "resources/public/js/out/schema/core.cljs", :line 385, :column 1, :end-line 385, :end-column 9, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 385, :column 6, :end-line 385, :end-column 9}, :doc "Any number"}, eq {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 257, :column 20, :end-line 257, :end-column 22, :arglists (quote ([v])), :doc "A value that must be (= v)."}, :name schema.core/eq, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 22, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :end-line 257, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "A value that must be (= v)."}, validate {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 162, :column 20, :end-line 162, :end-column 28, :arglists (quote ([schema value])), :doc "Throw an exception if value does not satisfy schema; otherwise, return value."}, :name schema.core/validate, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 28, :method-params ([schema value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema value])), :doc "Throw an exception if value does not satisfy schema; otherwise, return value."}, pred {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 316, :column 20, :end-line 316, :end-column 24, :arglists (quote ([p?] [p? pred-name])), :doc "A value for which p? returns true (and does not throw).\n   Optional pred-name can be passed for nicer validation errors.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p?] [p? pred-name]), :arglists ([p?] [p? pred-name]), :arglists-meta (nil nil)}}, :name schema.core/pred, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([p?] [p? pred-name]), :arglists ([p?] [p? pred-name]), :arglists-meta (nil nil)}, :method-params ([p?] [p? pred-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 316, :end-line 316, :max-fixed-arity 2, :fn-var true, :arglists ([p?] [p? pred-name]), :doc "A value for which p? returns true (and does not throw).\n   Optional pred-name can be passed for nicer validation errors."}, AnythingSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/AnythingSchema, :file "resources/public/js/out/schema/core.cljs", :end-column 39, :type true, :column 25, :internal-ctor true, :line 234, :record true, :end-line 234, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, Any {:name schema.core/Any, :file "resources/public/js/out/schema/core.cljs", :line 242, :column 1, :end-line 242, :end-column 9, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 242, :column 6, :end-line 242, :end-column 9}, :doc "Any value, including nil."}, Regex {:name schema.core/Regex, :file "resources/public/js/out/schema/core.cljs", :line 401, :column 1, :end-line 401, :end-column 11, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 401, :column 6, :end-line 401, :end-column 11}, :doc "A regular expression"}, ->EnumSchema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 285, :column 25, :end-line 285, :end-column 35, :internal-ctor true, :factory :positional, :arglists (quote ([vs]))}, :name schema.core/->EnumSchema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 35, :method-params ([vs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 285, :end-line 285, :max-fixed-arity 1, :fn-var true, :arglists (quote ([vs]))}, RequiredKey {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/RequiredKey, :file "resources/public/js/out/schema/core.cljs", :end-column 36, :type true, :column 25, :internal-ctor true, :line 595, :record true, :end-line 595, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, explain-kspec {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 629, :column 21, :end-line 629, :end-column 34, :private true, :arglists (quote ([kspec]))}, :private true, :name schema.core/explain-kspec, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 34, :method-params ([kspec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 629, :end-line 629, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kspec]))}, Inst {:name schema.core/Inst, :file "resources/public/js/out/schema/core.cljs", :line 405, :column 1, :end-line 405, :end-column 10, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 405, :column 6, :end-line 405, :end-column 10}, :doc "The local representation of #inst ..."}, map->OptionalKey {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 608, :column 25, :end-line 608, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__29059]))}, :name schema.core/map->OptionalKey, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 36, :method-params ([G__29059]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 608, :end-line 608, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__29059]))}, FnSchema {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/FnSchema, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :type true, :column 25, :internal-ctor true, :line 904, :record true, :end-line 904, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, if {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 528, :column 20, :end-line 528, :end-column 22, :arglists (quote ([pred if-schema else-schema])), :doc "if the predicate returns truthy, use the if-schema, otherwise use the else-schema"}, :name schema.core/if, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 22, :method-params ([pred if-schema else-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 528, :end-line 528, :max-fixed-arity 3, :fn-var true, :arglists (quote ([pred if-schema else-schema])), :doc "if the predicate returns truthy, use the if-schema, otherwise use the else-schema"}, Predicate {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Predicate, :file "resources/public/js/out/schema/core.cljs", :end-column 34, :type true, :column 25, :internal-ctor true, :line 302, :record true, :end-line 302, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, make-fn-schema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 923, :column 20, :end-line 923, :end-column 34, :arglists (quote ([output-schema input-schemas])), :doc "A function outputting a value in output schema, whose argument vector must match one of\n   input-schemas, each of which should be a sequence schema.\n   Currently function schemas are purely descriptive; they validate against any function,\n   regardless of actual input and output types."}, :name schema.core/make-fn-schema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 34, :method-params ([output-schema input-schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 923, :end-line 923, :max-fixed-arity 2, :fn-var true, :arglists (quote ([output-schema input-schemas])), :doc "A function outputting a value in output schema, whose argument vector must match one of\n   input-schemas, each of which should be a sequence schema.\n   Currently function schemas are purely descriptive; they validate against any function,\n   regardless of actual input and output types."}, map-walker {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 697, :column 21, :end-line 697, :end-column 31, :private true, :arglists (quote ([map-schema]))}, :private true, :name schema.core/map-walker, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 31, :method-params ([map-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 697, :end-line 697, :max-fixed-arity 1, :fn-var true, :arglists (quote ([map-schema]))}, Str {:name schema.core/Str, :file "resources/public/js/out/schema/core.cljs", :line 376, :column 1, :end-line 376, :end-column 9, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 376, :column 6, :end-line 376, :end-column 9}, :doc "Satisfied only by String.\n   Is (pred string?) and not js/String in cljs because of keywords."}, map->EqSchema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 248, :column 25, :end-line 248, :end-column 33, :internal-ctor true, :factory :map, :arglists (quote ([G__28943]))}, :name schema.core/map->EqSchema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :method-params ([G__28943]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 248, :end-line 248, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28943]))}, ->AnythingSchema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 234, :column 25, :end-line 234, :end-column 39, :internal-ctor true, :factory :positional, :arglists (quote ([_]))}, :name schema.core/->AnythingSchema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 39, :method-params ([_]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 234, :end-line 234, :max-fixed-arity 1, :fn-var true, :arglists (quote ([_]))}, maybe {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 429, :column 20, :end-line 429, :end-column 25, :arglists (quote ([schema])), :doc "A value that must either be nil or satisfy schema"}, :name schema.core/maybe, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 25, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 429, :end-line 429, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "A value that must either be nil or satisfy schema"}, check {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 156, :column 20, :end-line 156, :end-column 25, :arglists (quote ([schema x])), :doc "Return nil if x matches schema; otherwise, returns a value that looks like the\n   'bad' parts of x with ValidationErrors at the leaves describing the failures."}, :name schema.core/check, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 25, :method-params ([schema x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema x])), :doc "Return nil if x matches schema; otherwise, returns a value that looks like the\n   'bad' parts of x with ValidationErrors at the leaves describing the failures."}, pair {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 848, :column 20, :end-line 848, :end-column 24, :arglists (quote ([first-schema first-name second-schema second-name])), :doc "A schema for a pair of schemas and their names"}, :name schema.core/pair, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 24, :method-params ([first-schema first-name second-schema second-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 848, :end-line 848, :max-fixed-arity 4, :fn-var true, :arglists (quote ([first-schema first-name second-schema second-name])), :doc "A schema for a pair of schemas and their names"}, set-fn-validation! {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 1019, :column 20, :end-line 1019, :end-column 38, :arglists (quote ([on?])), :doc "Globally turn on schema validation for all s/fn and s/defn instances."}, :name schema.core/set-fn-validation!, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 38, :method-params ([on?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1019, :end-line 1019, :max-fixed-arity 1, :fn-var true, :arglists (quote ([on?])), :doc "Globally turn on schema validation for all s/fn and s/defn instances."}, EnumSchema {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/EnumSchema, :file "resources/public/js/out/schema/core.cljs", :end-column 35, :type true, :column 25, :internal-ctor true, :line 285, :record true, :end-line 285, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->OptionalKey {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 608, :column 25, :end-line 608, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([k]))}, :name schema.core/->OptionalKey, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 36, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 608, :end-line 608, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, ->ConditionalSchema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 501, :column 25, :end-line 501, :end-column 42, :internal-ctor true, :factory :positional, :arglists (quote ([preds-and-schemas]))}, :name schema.core/->ConditionalSchema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 42, :method-params ([preds-and-schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 501, :end-line 501, :max-fixed-arity 1, :fn-var true, :arglists (quote ([preds-and-schemas]))}, ->NamedSchema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 437, :column 25, :end-line 437, :end-column 36, :internal-ctor true, :factory :positional, :arglists (quote ([schema name]))}, :name schema.core/->NamedSchema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 36, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 437, :end-line 437, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name]))}, schematize-fn {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 1040, :column 20, :end-line 1040, :end-column 33, :arglists (quote ([f schema])), :doc "Attach the schema to fn f at runtime, extractable by fn-schema."}, :name schema.core/schematize-fn, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :method-params ([f schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1040, :end-line 1040, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f schema])), :doc "Attach the schema to fn f at runtime, extractable by fn-schema."}, Uuid {:name schema.core/Uuid, :file "resources/public/js/out/schema/core.cljs", :line 409, :column 1, :end-line 409, :end-column 10, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 409, :column 6, :end-line 409, :end-column 10}, :doc "The local representation of #uuid ..."}, map->Isa {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 264, :column 25, :end-line 264, :end-column 28, :internal-ctor true, :factory :map, :arglists (quote ([G__28951]))}, :name schema.core/map->Isa, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 28, :method-params ([G__28951]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 264, :end-line 264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28951]))}, map->Either {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 452, :column 25, :end-line 452, :end-column 31, :internal-ctor true, :factory :map, :arglists (quote ([G__29007]))}, :name schema.core/map->Either, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 31, :method-params ([G__29007]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 452, :end-line 452, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__29007]))}, ->Record {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 862, :column 25, :end-line 862, :end-column 31, :internal-ctor true, :factory :positional, :arglists (quote ([klass schema]))}, :name schema.core/->Record, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 31, :method-params ([klass schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 862, :end-line 862, :max-fixed-arity 2, :fn-var true, :arglists (quote ([klass schema]))}, protocol-name {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 328, :column 20, :end-line 328, :end-column 33, :arglists (quote ([protocol]))}, :name schema.core/protocol-name, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :method-params ([protocol]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 328, :end-line 328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([protocol]))}, Isa {:num-fields 2, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Isa, :file "resources/public/js/out/schema/core.cljs", :end-column 28, :type true, :column 25, :internal-ctor true, :line 264, :record true, :end-line 264, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, +missing+ {:name schema.core/+missing+, :file "resources/public/js/out/schema/core.cljs", :line 591, :column 1, :end-line 591, :end-column 24, :no-doc true, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 591, :column 15, :end-line 591, :end-column 24, :no-doc true}, :doc "A sentinel value representing missing portions of the input data."}, ->Either {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 452, :column 25, :end-line 452, :end-column 31, :internal-ctor true, :factory :positional, :arglists (quote ([schemas]))}, :name schema.core/->Either, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 31, :method-params ([schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 452, :end-line 452, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schemas]))}, map->NamedSchema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 437, :column 25, :end-line 437, :end-column 36, :internal-ctor true, :factory :map, :arglists (quote ([G__28999]))}, :name schema.core/map->NamedSchema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 36, :method-params ([G__28999]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 437, :end-line 437, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28999]))}, start-walker {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 141, :column 20, :end-line 141, :end-column 32, :arglists (quote ([sub-walker schema])), :doc "The entry point for creating walkers.  Binds the provided walker to subschema-walker,\n   then calls it on the provided schema.  For simple validation, pass walker as sub-walker.\n   More sophisticated behavior (coercion, etc), can be achieved by passing a sub-walker\n   that wraps walker with additional behavior."}, :name schema.core/start-walker, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 32, :method-params ([sub-walker schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sub-walker schema])), :doc "The entry point for creating walkers.  Binds the provided walker to subschema-walker,\n   then calls it on the provided schema.  For simple validation, pass walker as sub-walker.\n   More sophisticated behavior (coercion, etc), can be achieved by passing a sub-walker\n   that wraps walker with additional behavior."}, checker {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 150, :column 20, :end-line 150, :end-column 27, :arglists (quote ([schema])), :doc "Compile an efficient checker for schema, which returns nil for valid values and\n   error descriptions otherwise."}, :name schema.core/checker, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 27, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Compile an efficient checker for schema, which returns nil for valid values and\n   error descriptions otherwise."}, Keyword {:name schema.core/Keyword, :file "resources/public/js/out/schema/core.cljs", :line 393, :column 1, :end-line 393, :end-column 13, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 393, :column 6, :end-line 393, :end-column 13}, :doc "A keyword"}, ->MapEntry {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 640, :column 25, :end-line 640, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([kspec val-schema]))}, :name schema.core/->MapEntry, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :method-params ([kspec val-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 640, :end-line 640, :max-fixed-arity 2, :fn-var true, :arglists (quote ([kspec val-schema]))}, ->Protocol {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 334, :column 25, :end-line 334, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([p]))}, :name schema.core/->Protocol, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 334, :end-line 334, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, ->Maybe {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 420, :column 25, :end-line 420, :end-column 30, :internal-ctor true, :factory :positional, :arglists (quote ([schema]))}, :name schema.core/->Maybe, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 30, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 420, :end-line 420, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema]))}, explain-input-schema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 898, :column 20, :end-line 898, :end-column 40, :arglists (quote ([input-schema]))}, :name schema.core/explain-input-schema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 40, :method-params ([input-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 898, :end-line 898, :max-fixed-arity 1, :fn-var true, :arglists (quote ([input-schema]))}, record {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 881, :column 20, :end-line 881, :end-column 26, :arglists (quote ([klass schema])), :doc "A Record instance of type klass, whose elements match map schema 'schema'."}, :name schema.core/record, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 26, :method-params ([klass schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 881, :end-line 881, :max-fixed-arity 2, :fn-var true, :arglists (quote ([klass schema])), :doc "A Record instance of type klass, whose elements match map schema 'schema'."}, optional-key? {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 615, :column 20, :end-line 615, :end-column 33, :arglists (quote ([ks]))}, :name schema.core/optional-key?, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 615, :end-line 615, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, map->Both {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 476, :column 25, :end-line 476, :end-column 29, :internal-ctor true, :factory :map, :arglists (quote ([G__29017]))}, :name schema.core/map->Both, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 29, :method-params ([G__29017]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 476, :end-line 476, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__29017]))}, required-key {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 597, :column 20, :end-line 597, :end-column 32, :arglists (quote ([k])), :doc "A required key in a map"}, :name schema.core/required-key, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 32, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 597, :end-line 597, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "A required key in a map"}, optional {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 784, :column 20, :end-line 784, :end-column 28, :arglists (quote ([schema name])), :doc "A single optional element of a sequence (not repeated, the implicit default)"}, :name schema.core/optional, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 28, :method-params ([schema name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 784, :end-line 784, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema name])), :doc "A single optional element of a sequence (not repeated, the implicit default)"}, Int {:name schema.core/Int, :file "resources/public/js/out/schema/core.cljs", :line 389, :column 1, :end-line 389, :end-column 9, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 389, :column 6, :end-line 389, :end-column 9}, :doc "Any integral number"}, ->FnSchema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 904, :column 25, :end-line 904, :end-column 33, :internal-ctor true, :factory :positional, :arglists (quote ([output-schema input-schemas]))}, :name schema.core/->FnSchema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :method-params ([output-schema input-schemas]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :line 904, :end-line 904, :max-fixed-arity 2, :fn-var true, :arglists (quote ([output-schema input-schemas]))}, Schema {:meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 95, :column 14, :end-line 95, :end-column 20, :doc nil, :protocol-symbol true, :protocol-info {:methods {walker [[this]], explain [[this]]}}}, :protocol-symbol true, :name schema.core/Schema, :file "resources/public/js/out/schema/core.cljs", :end-column 20, :column 1, :line 95, :protocol-info {:methods {walker [[this]], explain [[this]]}}, :info nil, :end-line 95, :impls #{schema.core/Isa cljs/core.PersistentHashMap js/RegExp cljs/core.PersistentArrayMap schema.core/NamedSchema cljs/core.PersistentVector schema.core/Either schema.core/Both cljs/core.PersistentHashSet schema.core/ConditionalSchema schema.core/Record schema.core/EqSchema schema.core/MapEntry function schema.core/Maybe schema.core/AnythingSchema schema.core/FnSchema schema.core/Predicate schema.core/EnumSchema schema.core/Protocol}, :doc nil}, Both {:num-fields 1, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection schema.core/Schema cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name schema.core/Both, :file "resources/public/js/out/schema/core.cljs", :end-column 29, :type true, :column 25, :internal-ctor true, :line 476, :record true, :end-line 476, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->Maybe {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 420, :column 25, :end-line 420, :end-column 30, :internal-ctor true, :factory :map, :arglists (quote ([G__28991]))}, :name schema.core/map->Maybe, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 30, :method-params ([G__28991]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 420, :end-line 420, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28991]))}, map-entry {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 679, :column 20, :end-line 679, :end-column 29, :arglists (quote ([kspec val-schema]))}, :name schema.core/map-entry, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 29, :method-params ([kspec val-schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 679, :end-line 679, :max-fixed-arity 2, :fn-var true, :arglists (quote ([kspec val-schema]))}, walker {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 96, :column 4, :end-line 96, :end-column 10, :protocol schema.core/Schema, :doc "Produce a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     If this is a composite schema, should let-bind (subschema-walker sub-schema) for each\n     subschema outside the returned fn.  Within the returned fn, should break down data\n     into constituents, call the let-bound subschema walkers on each component, and then\n     reassemble the components into a walked version of the data (or an ErrorContainer\n     describing the validaiton failures).\n\n     Attempting to walk a value that already contains a utils/ErrorContainer produces undefined\n     behavior.\n\n     User code should never call `walker` directly.  Instead, it should call `start-walker`\n     below.", :arglists (quote ([this]))}, :protocol schema.core/Schema, :name schema.core/walker, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Produce a function that takes [data], and either returns a walked version of data\n     (by default, usually just data), or a utils/ErrorContainer containing value that looks\n     like the 'bad' parts of data with ValidationErrors at the leaves describing the failures.\n\n     If this is a composite schema, should let-bind (subschema-walker sub-schema) for each\n     subschema outside the returned fn.  Within the returned fn, should break down data\n     into constituents, call the let-bound subschema walkers on each component, and then\n     reassemble the components into a walked version of the data (or an ErrorContainer\n     describing the validaiton failures).\n\n     Attempting to walk a value that already contains a utils/ErrorContainer produces undefined\n     behavior.\n\n     User code should never call `walker` directly.  Instead, it should call `start-walker`\n     below."}, specific-key? {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 625, :column 20, :end-line 625, :end-column 33, :arglists (quote ([ks]))}, :name schema.core/specific-key?, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 33, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 625, :end-line 625, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}, map->EnumSchema {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 285, :column 25, :end-line 285, :end-column 35, :internal-ctor true, :factory :map, :arglists (quote ([G__28962]))}, :name schema.core/map->EnumSchema, :variadic false, :file "resources/public/js/out/schema/core.cljs", :end-column 35, :method-params ([G__28962]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 285, :end-line 285, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__28962]))}, both {:protocol-inline nil, :meta {:file "/Users/eliana/workspace/cljs/Portraits/resources/public/js/out/schema/core.cljs", :line 493, :column 20, :end-line 493, :end-column 24, :arglists (quote ([& schemas])), :doc "A value that must satisfy every schema in schemas.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}}, :name schema.core/both, :variadic true, :file "resources/public/js/out/schema/core.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}, :method-params [(schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 493, :end-line 493, :max-fixed-arity 0, :fn-var true, :arglists ([& schemas]), :doc "A value that must satisfy every schema in schemas."}}, :require-macros {macros schema.macros, schema.macros schema.macros}, :cljs.analyzer/constants {:seen #{:schema :klass :v :schema.core/error :parent :else :_ :kspec :name :extra-validator-fn :output-schema :value :proto-sym :input-schemas :type :val-schema :schema.core/missing :preds-and-schemas :k :optional? :schemas :h :pred-name :error :p? :proto-pred :p :vs}, :order [:type :schema :value :error :schema.core/error :_ :v :h :parent :vs :p? :pred-name :else :proto-sym :p :proto-pred :name :schemas :preds-and-schemas :schema.core/missing :k :kspec :val-schema :optional? :klass :extra-validator-fn :output-schema :input-schemas]}, :doc "A library for data shape definition and validation. A Schema is just Clojure data,\n   which can be used to document and validate Clojure functions and data.\n\n   For example,\n\n   (def FooBar {:foo Keyword :bar [Number]}) ;; a schema\n\n   (check FooBar {:foo :k :bar [1.0 2.0 3.0]})\n   ==> nil\n\n   representing successful validation, but the following all return helpful errors\n   describing how the provided data fails to measure up to schema FooBar's standards.\n\n   (check FooBar {:bar [1.0 2.0 3.0]})\n   ==> {:foo missing-required-key}\n\n   (check FooBar {:foo 1 :bar [1.0 2.0 3.0]})\n   ==> {:foo (not (keyword? 1))}\n\n   (check FooBar {:foo :k :bar [1.0 2.0 3.0] :baz 1})\n   ==> {:baz disallowed-key}\n\n   Schema lets you describe your leaf values using the Any, Keyword, Symbol, Number,\n   String, and Int definitions below, or (in Clojure) you can use arbitrary Java\n   classes or primitive casts to describe simple values.\n\n   From there, you can build up schemas for complex types using Clojure syntax\n   (map literals for maps, set literals for sets, vector literals for sequences,\n   with details described below), plus helpers below that provide optional values,\n   enumerations, arbitrary predicates, and more.\n\n   Assuming you (:require [schema.core :as s :include-macros true]),\n   Schema also provides macros for defining records with schematized elements\n   (s/defrecord), and named or anonymous functions (s/fn and s/defn) with\n   schematized inputs and return values.  In addition to producing better-documented\n   records and functions, these macros allow you to retrieve the schema associated\n   with the defined record or function.  Moreover, functions include optional\n   *validation*, which will throw an error if the inputs or outputs do not\n   match the provided schemas:\n\n   (s/defrecord FooBar\n    [foo :- Int\n     bar :- String])\n\n   (s/defn quux :- Int\n    [foobar :- Foobar\n     mogrifier :- Number]\n    (* mogrifier (+ (:foo foobar) (Long/parseLong (:bar foobar)))))\n\n   (quux (FooBar. 10 \"5\") 2)\n   ==> 30\n\n   (fn-schema quux)\n   ==> (=> Int (record user.FooBar {:foo Int, :bar java.lang.String}) java.lang.Number)\n\n   (s/with-fn-validation (quux (FooBar. 10.2 \"5\") 2))\n   ==> Input to quux does not match schema: [(named {:foo (not (integer? 10.2))} foobar) nil]\n\n   As you can see, the preferred syntax for providing type hints to schema's defrecord,\n   fn, and defn macros is to follow each element, argument, or function name with a\n   :- schema.  Symbols without schemas default to a schema of Any.  In Clojure,\n   class (e.g., clojure.lang.String) and primitive schemas (long, double) are also\n   propagated to tag metadata to ensure you get the type hinting and primitive\n   behavior you ask for.\n\n   If you don't like this style, standard Clojure-style typehints are also supported:\n\n   (fn-schema (s/fn [^String x]))\n   ==> (=> Any java.lang.String)\n\n   **DEPRECATED SYNTAX BELOW, TO BE REMOVED**\n   You can directly type hint a symbol as a class, primitive, protocol, or simple\n   schema.  For complex schemas, due to Clojure's rules about ^, you must enclose\n   the schema in a {:s schema} map like so:\n\n   (fn-schema (s/fn [^{:s [String]} x]))\n   (=> Any [java.lang.String])\n\n   (We highly prefer the :- syntax to this abomination, however.)  See the docstrings\n   of defrecord, fn, and defn for more details about how to use these macros."}