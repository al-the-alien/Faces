;; Analyzed by ClojureScript 0.0-2816
{:defs {join-classes {:protocol-inline nil, :name sablono.util/join-classes, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 19, :method-params ([classes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([classes])), :doc "Join the `classes` with a whitespace.", :test true}, compact-map {:protocol-inline nil, :name sablono.util/compact-map, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 18, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Removes all map entries where the value of the entry is empty.", :test true}, to-str {:protocol-inline nil, :protocol sablono.util/ToString, :name sablono.util/to-str, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 9, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, react-fn {:protocol-inline nil, :name sablono.util/react-fn, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 15, :method-params ([type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/Symbol, :variadic false, :max-fixed-arity 1}), :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([type])), :doc "Return the symbol of a fn that build a React element. ", :test true}, camel-case-keys {:protocol-inline nil, :name sablono.util/camel-case-keys, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 22, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj any}, :variadic false, :max-fixed-arity 1}), :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Recursively transforms all map keys into camel case.", :test true}, match-tag {:protocol-inline nil, :name sablono.util/match-tag, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Match `s` as a CSS tag and return a vector of tag name, CSS id and\n  CSS classes.", :test true}, *base-url* {:file "resources/public/js/out/sablono/util.cljs", :line 7, :column 1, :end-line 7, :end-column 26, :dynamic true, :test true, :name sablono.util/*base-url*}, normalize-element {:protocol-inline nil, :name sablono.util/normalize-element, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 24, :method-params ([p__33501]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[tag & content]])), :doc "Ensure an element vector is of the form [tag-name attrs content].", :test true}, as-str {:protocol-inline nil, :name sablono.util/as-str, :variadic true, :file "resources/public/js/out/sablono/util.cljs", :end-column 13, :method-params ([xs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic true, :max-fixed-arity 0}), :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& xs])), :doc "Converts its arguments into a string using to-str.", :test true}, strip-outer {:protocol-inline nil, :name sablono.util/strip-outer, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 18, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Strip the outer HTML tag from the string `s`.", :test true}, strip-attr {:protocol-inline nil, :name sablono.util/strip-attr, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 17, :method-params ([s attr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s attr])), :doc "Strip the HTML attribute `attr` and it's value from the string `s`.", :test true}, html-to-dom-attrs {:protocol-inline nil, :name sablono.util/html-to-dom-attrs, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 24, :method-params ([attrs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([attrs])), :doc "Converts all HTML attributes to their DOM equivalents.", :test true}, strip-css {:protocol-inline nil, :name sablono.util/strip-css, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 16, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Strip the # and . characters from the beginning of `s`.", :test true}, ToString {:protocol-symbol true, :name sablono.util/ToString, :file "resources/public/js/out/sablono/util.cljs", :end-column 22, :column 1, :line 9, :protocol-info {:methods {to-str [[x]]}}, :info nil, :end-line 9, :impls #{nil goog/Uri cljs/core.Keyword number default}, :test true}, attr-pattern {:protocol-inline nil, :name sablono.util/attr-pattern, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 19, :method-params ([attr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil js/RegExp}, :variadic false, :max-fixed-arity 1}), :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([attr])), :doc "Returns a regular expression that matches the HTML attribute `attr`\n  and it's value.", :test true}, ToURI {:protocol-symbol true, :name sablono.util/ToURI, :file "resources/public/js/out/sablono/util.cljs", :end-column 19, :column 1, :line 12, :protocol-info {:methods {to-uri [[x]]}}, :info nil, :end-line 12, :impls #{goog/Uri default}, :test true}, camel-case {:protocol-inline nil, :name sablono.util/camel-case, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 17, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil cljs.core/Keyword clj-nil}, :variadic false, :max-fixed-arity 1}), :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "Returns camel case version of the key, e.g. :http-equiv becomes :httpEquiv.", :test true}, to-uri {:protocol-inline nil, :protocol sablono.util/ToURI, :name sablono.util/to-uri, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 10, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 12, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, wrapped-type? {:protocol-inline nil, :name sablono.util/wrapped-type?, :variadic false, :file "resources/public/js/out/sablono/util.cljs", :end-column 20, :method-params ([type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([type])), :doc "Return true if the element `type` needs to be wrapped.", :test true}, merge-with-class {:protocol-inline nil, :name sablono.util/merge-with-class, :variadic true, :file "resources/public/js/out/sablono/util.cljs", :end-column 23, :method-params ([maps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{clj any}, :variadic true, :max-fixed-arity 0}), :line 62, :end-line 62, :max-fixed-arity 0, :fn-var true, :arglists (quote ([& maps])), :doc "Like clojure.core/merge but concatenate :class entries.", :test true}}, :name sablono.util, :doc nil, :excludes #{replace}, :use-macros nil, :require-macros nil, :uses {capitalize clojure.string, join clojure.string, replace clojure.string, rename-keys clojure.set, split clojure.string, blank? clojure.string}, :requires {clojure.string clojure.string, clojure.set clojure.set, Uri goog.Uri}, :imports {Uri goog.Uri}}